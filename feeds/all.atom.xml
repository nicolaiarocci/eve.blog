<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Eve News</title><link href="http://blog.python-eve.org/" rel="alternate"></link><link href="http://blog.python-eve.org/feeds/all.atom.xml" rel="self"></link><id>http://blog.python-eve.org/</id><updated>2013-09-30T00:00:00+02:00</updated><entry><title>Eve 0.1</title><link href="http://blog.python-eve.org/eve-01" rel="alternate"></link><updated>2013-09-30T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-09-30:eve-01</id><summary type="html">&lt;p&gt;This release marks the passage from alpha to beta and introduces several
features and enhancements. Also, someone was so kind to post about the Eve
project on Reddit, which in turn granted us a post on Hacker News.  This
brought a lot of attention, resulting in a massive increase in downloads. The
overall feedback has been tremendous, so much that I'm flattered, but most
importantly we received some very good suggestions, some of which have been
turned into features shipped with this update. Here's a list of relevant
features introduced:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Support for PUT&lt;/li&gt;
&lt;li&gt;Embedded Resource Serialization&lt;/li&gt;
&lt;li&gt;No trailing slash URLs&lt;/li&gt;
&lt;li&gt;Support for X-HTTP-Method-Override for all API methods&lt;/li&gt;
&lt;li&gt;Support for Python 3.3 on Windows systems&lt;/li&gt;
&lt;li&gt;Optional HATEOAS&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="support-for-put"&gt;
&lt;h2&gt;Support for PUT&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt; should be used to update only a part of a document whereas &lt;tt class="docutils literal"&gt;PUT&lt;/tt&gt;
should be used to completely replace a document with another (valid) one while
keeping the same unique identifier. Suppose we have a person model in our
domain with the field firstname, middlename and lastname. Now let the
middlename be optional.&lt;/p&gt;
&lt;p&gt;There is one person in our database:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;firstname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Maria&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;middlename&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Johanna&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lastname&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Simmons&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we want to change the middlename we can use &lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt; to update it&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl -v -X PATCH -d {middlename:&amp;quot;Christina&amp;quot;} http://localhost:5000/people/&amp;lt;marias id&amp;gt;
&lt;/pre&gt;
&lt;p&gt;But if what if we want to delete the middlename and change the lastname at the
same time? It would be easier to send a new document to the server&lt;/p&gt;
&lt;pre class="literal-block"&gt;
curl -v -X PUT -d {firstname: &amp;quot;Maria&amp;quot;, lastname: &amp;quot;Thompson&amp;quot;} http://localhost:5000/people/&amp;lt;marias id&amp;gt;
&lt;/pre&gt;
&lt;p&gt;I doesn't seem to make a big difference if we used &lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;PUT&lt;/tt&gt; here
but for more complicated use cases it can be really helpful to have &lt;tt class="docutils literal"&gt;PUT&lt;/tt&gt;
available. For example if we want to put a default document in order to reset
the current one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="embedded-resources"&gt;
&lt;h2&gt;Embedded Resources&lt;/h2&gt;
&lt;p&gt;If a document field is referencing a document in another resource, clients can
request the referenced document to be embedded within the requested document.
Clients have the power to activate document embedding on per-request basis by
means of a query parameter. Suppose you have a emails resource configured like
this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s"&gt;&amp;#39;emails&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;#39;schema&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;author:&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;objectid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s"&gt;&amp;#39;data_relation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;collection&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;user&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;field&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                    &lt;span class="s"&gt;&amp;#39;embeddable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;
                &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;subject:&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
            &lt;span class="s"&gt;&amp;#39;body:&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; like &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/emails?embedded={&amp;quot;author&amp;quot;:1}&lt;/span&gt;&lt;/tt&gt; would return a fully embedded
user document whereas the same request without the embedded argument would just
return the user ObjectId. Embedding can be enabled or disabled both at global
level (by setting &lt;tt class="docutils literal"&gt;EMBEDDING&lt;/tt&gt; to either &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;) and at
resource level (by toggling &lt;tt class="docutils literal"&gt;embedding&lt;/tt&gt;). Furthermore, only fields with
the embeddable value explicitly set to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; will allow the embedding of
referenced documents.&lt;/p&gt;
&lt;p&gt;Currenly we only support a single layer of embedding, i.e.
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/emails?{&amp;quot;author&amp;quot;:&lt;/span&gt; 1}&lt;/tt&gt; but not &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/emails?{&amp;quot;author.friends&amp;quot;:&lt;/span&gt; 1}&lt;/tt&gt;. Also, keep
in mind that this feature is about &lt;em&gt;serialization&lt;/em&gt; on &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt; requests. There's
no support for POSTing or PUTting or PATCHing embedded documents.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="no-trailing-slash-urls"&gt;
&lt;h2&gt;No trailing slash URLs&lt;/h2&gt;
&lt;p&gt;Endpoints will now respond to both kind of URLS:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;No trailing slash: &lt;tt class="docutils literal"&gt;/users&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/users/&amp;lt;id&amp;gt;&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;li&gt;Trailing slash: &lt;tt class="docutils literal"&gt;/users/&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;/users/&amp;lt;id&amp;gt;/&lt;/span&gt;&lt;/tt&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Previously, only trailing slash URLs were accessible, whereas no trailing slash
would return a &lt;tt class="docutils literal"&gt;301&lt;/tt&gt; redirect. While the previous behavior was more
consistent with REST &amp;quot;unique identifier&amp;quot; principle, many people reported that
it was causing issues with some JavaScript libraries such as AngularJS.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="optional-hateoas"&gt;
&lt;h2&gt;Optional HATEOAS&lt;/h2&gt;
&lt;p&gt;HATEOAS can be disabled both at the API and/or resource level. When HATEOAS is
disabled, response payloads have a different structure. The resource payload is
a simple list of items:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;firstname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Mark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;lastname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Green&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;born&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Sat, 23 Feb 1985 12:00:00 GMT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;role&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;copy&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;location&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;address&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;4925 Lacross Road&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;50bf198338345b1c604faf31&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;updated&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wed, 05 Dec 2012 09:53:07 GMT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;created&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Wed, 05 Dec 2012 09:53:07 GMT&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;etag&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;ec5e8200b8fa0596afe9ca71a87f23e71ca30e2d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;&amp;quot;firstname&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;John&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, the &lt;tt class="docutils literal"&gt;_links&lt;/tt&gt; element is missing. Why would you want to turn
HATEOAS off? Well, if you know that your client application is not going to use
the feature, then you might want to save on both bandwidth and performance.
Also, some REST client libraries out there might have issues when parsing
something other than a simple list of items.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="support-for-x-http-method-override"&gt;
&lt;h2&gt;Support for X-HTTP-Method-Override&lt;/h2&gt;
&lt;p&gt;As a fallback for the odd client not supporting any of the standard HTTP
methods, the API will gladly honor &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;X-HTTP-Method-Override&lt;/span&gt;&lt;/tt&gt; requests. For
example a client not supporting the &lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt; method could send a &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;
request with a &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;X-HTTP-Method-Override:&lt;/span&gt; PATCH&lt;/tt&gt; header. The API would then
perform a &lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt;, overriding the original request method. While previously
you could override only PATCH by setting the override header to &lt;tt class="docutils literal"&gt;True&lt;/tt&gt;, now
you can override &lt;em&gt;any&lt;/em&gt; HTTP method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wrapping-it-up"&gt;
&lt;h2&gt;Wrapping it up&lt;/h2&gt;
&lt;p&gt;There are also many enhancements and bug fixes. See the &lt;a class="reference external" href="http://python-eve.org/changelog.html"&gt;changelog&lt;/a&gt; for details.
One worth mentioning here is the improved support for Python 3 on Windows
systems. If you have been experiencing encoding errors while installing Eve,
this release will make you happy.&lt;/p&gt;
&lt;p&gt;As we're in beta now, we will be strictly following &lt;a class="reference external" href="http://semver.org/"&gt;Semantic Versioning&lt;/a&gt; when
labeling Eve releases. New releases will also be better documented on this
blog, as this post is hopefully showing. Also, during alpha we have been doing
monthly releases. This might change in the future, as I feel that beta
releases would probably benefit from staying out in the wild for prolonged
periods of time.&lt;/p&gt;
&lt;p&gt;Thanks to all the people who contributed to this patch: Bryan Cattle, Dong Wei
Ming, Ken Carpenter, Jean Boussier, Kracekumar, Francisco Corrales Morales,
Arsh Singh. Also thanks to all the people who suggested features and fixes.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://crate.io/packages/Eve/"&gt;Eve 0.1&lt;/a&gt; while it's hot.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="releases"></category></entry><entry><title>The Eve Mailing List</title><link href="http://blog.python-eve.org/the-eve-mailing-list" rel="alternate"></link><updated>2013-09-12T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-09-12:the-eve-mailing-list</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/python-eve"&gt;Eve Mailing List&lt;/a&gt; is intended to be a low traffic resource for
developers, contributors and maintainers.&lt;/p&gt;
&lt;p&gt;I'm opening it because I keep receiving emails about Eve and its satellite
projects &lt;a class="reference external" href="https://github.com/nicolaiarocci/cerberus"&gt;Cerberus&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/nicolaiarocci/events"&gt;Events&lt;/a&gt;.  While I'm more than happy to reply to invidual
requests, I feel it is a real pity that valuable information is not being
shared between users. I'm also hoping that experienced Eve users will want to
contribute with their own advice and experiences, something that is already
happening elsewhere.&lt;/p&gt;
&lt;p&gt;Also, a mailing list is browsable, searchable, and covers all timezones,
something the current IRC room cannot do.&lt;/p&gt;
</summary><category term="releases"></category></entry><entry><title>v0.0.9 with Python 3.3 support</title><link href="http://blog.python-eve.org/v009-with-python-33-support" rel="alternate"></link><updated>2013-08-29T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-08-29:v009-with-python-33-support</id><summary type="html">&lt;p&gt;This release brings Python 3.3 support and aligns with most recent Flask,
Werkzeug and PyMongo releases.&lt;/p&gt;
&lt;p&gt;There are several backward-compatibility breaking changes, so you might want to
carefully read the &lt;a class="reference external" href="http://python-eve.org/changelog.html"&gt;changelog&lt;/a&gt; and check the updated &lt;a class="reference external" href="http://python-eve.org"&gt;documentation&lt;/a&gt;. Besides Py3
support, the most prominent feature is the new custom userid field now
available to &lt;a class="reference external" href="http://python-eve.org/authentication.html"&gt;Authentication&lt;/a&gt; classes, which allows for enhanced flexibility and
easier token revocation when using token-based authentication.&lt;/p&gt;
&lt;p&gt;Thanks to Bryan Cattle and Ryan Shea for their contributions and, as always, to
all those who opened tickets and supported the project so far.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://crate.io/packages/Eve/"&gt;Eve 0.0.9&lt;/a&gt;.&lt;/p&gt;
</summary><category term="releases"></category></entry><entry><title>Mocking tool for Eve APIs</title><link href="http://blog.python-eve.org/eve-mocker" rel="alternate"></link><updated>2013-08-01T00:00:00+02:00</updated><author><name>Thomas Sileo</name></author><id>tag:blog.python-eve.org,2013-08-01:eve-mocker</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://github.com/tsileo/eve-mocker"&gt;EveMocker&lt;/a&gt; is a mocking tool for &lt;a class="reference external" href="http://python-eve.org"&gt;Eve
powered REST API&lt;/a&gt;, based on the excellent &lt;a class="reference external" href="http://falcao.it/HTTPretty"&gt;HTTPretty&lt;/a&gt;, and aimed to be used in your unit tests, when
you rely on an Eve API. It mimics the behavior of an Eve API in a controlled
way. Why would you want to mock Eve when writing unit tests?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Your test suite will run faster.&lt;/li&gt;
&lt;li&gt;You don't need to bundle an Eve app exclusively for testing purposes (you can
spend more time on the actual task).&lt;/li&gt;
&lt;li&gt;You don't need to worry about having a real Eve server running when running
the test cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's say you want to test the following class stored in &lt;tt class="docutils literal"&gt;remote_items.py&lt;/tt&gt;
that need to call an Eve powered REST API:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;urlparse&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;urljoin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;API_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://my-eve-api.com/api/&amp;quot;&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RemoteItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;api_url&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;urljoin&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_latest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;endpoint_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;raise_for_status&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is how you can do it with Eve-Mocker:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;eve_mocker&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EveMocker&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;unittest&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;remote_items&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RemoteItems&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;API_URL&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TestRemoteItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TestCase&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testGetLatestItems&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fakeid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;my content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                 &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;fakeid2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;another_content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;
        &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;EveMocker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;API_URL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;eve_mocker&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c"&gt;# We feed EveMocker DB with some items&lt;/span&gt;
            &lt;span class="n"&gt;eve_mocker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_resource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;items&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

            &lt;span class="n"&gt;remote_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RemoteItems&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
            &lt;span class="n"&gt;latest_items&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;remote_items&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_latest&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;assertEqual&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;latest_items&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;unittest&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Check out &lt;a class="reference external" href="https://github.com/tsileo/eve-mocker"&gt;the repository&lt;/a&gt; on GitHub.&lt;/p&gt;
</summary><category term="documentation"></category><category term="tools"></category></entry><entry><title>Eve 0.0.8 Released</title><link href="http://blog.python-eve.org/eve-008-released" rel="alternate"></link><updated>2013-07-25T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-07-25:eve-008-released</id><summary type="html">&lt;p&gt;Today release adds support for MongoDB &lt;tt class="docutils literal"&gt;write_concern&lt;/tt&gt;, better pagination,
new event hooks (allowing for transformation of documents before they are sent
to clients), better CORS handling, validation for &lt;tt class="docutils literal"&gt;float&lt;/tt&gt; data type and
more (see &lt;a class="reference external" href="http://python-eve.org/changelog.html"&gt;changelog&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Thanks to Daniele Pizzolli, Julien Barbot and Garrin Kimmell for contributing
and to David Reese, Josh Matthews and others for opening tickets and supporting
Eve one way or another.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://crate.io/packages/Eve/"&gt;Eve 0.0.8&lt;/a&gt;.&lt;/p&gt;
</summary><category term="releases"></category></entry><entry><title>Eve 0.0.7 Released</title><link href="http://blog.python-eve.org/eve-007-released" rel="alternate"></link><updated>2013-06-18T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-06-18:eve-007-released</id><summary type="html">&lt;p&gt;Along with &lt;a class="reference external" href="http://python-eve.org/features.html#rate-limiting"&gt;Rate Limiting&lt;/a&gt;, which is the main feature, this release also adds
new powerful &lt;a class="reference external" href="http://python-eve.org/features.html#event-hooks"&gt;Event Hooks&lt;/a&gt;, gives more power to &lt;a class="reference external" href="http://python-eve.org/authentication.html"&gt;Authentication&lt;/a&gt; subclasses,
and (much) more. As always, see the &lt;a class="reference external" href="http://python-eve.org/changelog.html"&gt;changelog&lt;/a&gt; for all the news.&lt;/p&gt;
&lt;p&gt;Thanks to Paul Doucet for contributing, and to all the people who opened
tickets and supported Eve in one way or another.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://crate.io/packages/Eve/"&gt;Eve 0.0.7&lt;/a&gt;.&lt;/p&gt;
</summary><category term="releases"></category></entry><entry><title>Auto generate API docs</title><link href="http://blog.python-eve.org/eve-docs" rel="alternate"></link><updated>2013-06-17T00:00:00+02:00</updated><author><name>Charles Flynn</name></author><id>tag:blog.python-eve.org,2013-06-17:eve-docs</id><summary type="html">&lt;p&gt;Eve provides powerful capabilities for quickly building RESTful APIs. The
&lt;a class="reference external" href="https://github.com/charlesflynn/eve-docs"&gt;Eve-docs&lt;/a&gt; blueprint extends these capabilities with API documentation. You
activate the blueprint in your launch script, and Eve-docs creates the
documentation from your existing Eve configuration file, with no additional
configuration required.&lt;/p&gt;
&lt;img alt="An example of eve-docs auto generated API documentation" src="static/images/evedocs-example.png" /&gt;
&lt;p&gt;Eve-docs generates documentation in HTML using &lt;a class="reference external" href="http://twitter.github.io/bootstrap/"&gt;Twitter Bootstrap&lt;/a&gt;. You can
expand each domain to show available endpoints and methods, and further expand
each method to show parameter details. Eve-docs also publishes the
documentation data as JSON for programmatic consumption.&lt;/p&gt;
&lt;p&gt;For more detail see the &lt;a class="reference external" href="https://github.com/charlesflynn/eve-docs"&gt;project repo&lt;/a&gt; on Github.&lt;/p&gt;
</summary><category term="documentation"></category><category term="tools"></category></entry><entry><title>Account Management and REST</title><link href="http://blog.python-eve.org/account-management-and-rest" rel="alternate"></link><updated>2013-05-30T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-05-30:account-management-and-rest</id><summary type="html">&lt;p&gt;Lately I have been receiving a lot of enquiries on how to properly handle REST
API authentication, so I wrote a couple of tutorials that will hopefully shread
some light on the topic. They're filed under &lt;a class="reference external" href="http://python-eve.org/tutorials/account_management.html"&gt;RESTful Account Management&lt;/a&gt; and
cover both Basic and Token-Based Authentication scenarios.&lt;/p&gt;
&lt;p&gt;Besides the obvious immediate usefulness in solving the issue at hand, I find
that tutorials offer a golden opportunity to grasp how apparently unrelated
features can be assembled togheter to solve a problem. So just let me know if
you'd like to see more &lt;em&gt;howtos&lt;/em&gt;.&lt;/p&gt;
</summary><category term="tutorials"></category></entry><entry><title>Official IRC Channel</title><link href="http://blog.python-eve.org/official-irc-channel" rel="alternate"></link><updated>2013-05-20T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-05-20:official-irc-channel</id><summary type="html">&lt;p&gt;The official IRC channel for the project is now &lt;a class="reference external" href="irc://irc.freenode.net/python-eve"&gt;#python-eve&lt;/a&gt;. We left the
previous channel as it was accidentally named like a tool for the EVE ONLINE
space game, causing some players of that game to join in only to get totally
lost by our geek chatter.&lt;/p&gt;
</summary><category term="irc"></category></entry><entry><title>Eve 0.0.6 Released</title><link href="http://blog.python-eve.org/eve-006-released" rel="alternate"></link><updated>2013-05-13T00:00:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-05-13:eve-006-released</id><summary type="html">&lt;p&gt;The two main features introduced by this release are &lt;a class="reference external" href="http://python-eve.org/features.html#event-hooks"&gt;Event Hooks&lt;/a&gt; and
&lt;a class="reference external" href="http://python-eve.org/features.html#projections"&gt;Projections&lt;/a&gt;. Event hooks allow to subscribe to &lt;tt class="docutils literal"&gt;GET&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;PATCH&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;DELETE&lt;/tt&gt; requests with mutiple callbacks. Projections are conditional queries
where the client dictates which fields should be returned by the API (when
projections are omitted the whole document is returned).&lt;/p&gt;
&lt;p&gt;We also added support for HEAD requests, made sure that only fields defined in
resource schemas are returned, and applied a bunch of performance
optimizations, especially with regard to &lt;tt class="docutils literal"&gt;POST&lt;/tt&gt; (Eve now performs bulk
database inserts) and &lt;tt class="docutils literal"&gt;ETag&lt;/tt&gt; computation.  Also, if you have been
experiencing 400s make sure to download this release, as a couple of
significant bugs have been squashed. See the &lt;a class="reference external" href="https://github.com/nicolaiarocci/eve/blob/develop/CHANGES"&gt;changelog&lt;/a&gt; for all the news.&lt;/p&gt;
&lt;p&gt;Thanks to all the people who contributed either with patches or by opening
tickets and reporting bugs. In no particular order: Ondrej Slinták, Thomas
Sileo, Tomasz Jezierski, Nicolas Bazire, Nicola Carlier, maksim2042, Xu Wang,
Asdine El Hrychy, hluz, chronidev, Gianfranco Palumbo.&lt;/p&gt;
&lt;p&gt;Get &lt;a class="reference external" href="https://crate.io/packages/Eve/"&gt;Eve 0.0.6&lt;/a&gt; while it's hot!&lt;/p&gt;
</summary><category term="releases"></category></entry><entry><title>SQLAlchemy and Eve</title><link href="http://blog.python-eve.org/sqlalchemy-and-eve" rel="alternate"></link><updated>2013-05-10T15:39:00+02:00</updated><author><name>Nicola Iarocci</name></author><id>tag:blog.python-eve.org,2013-05-10:sqlalchemy-and-eve</id><summary type="html">&lt;p&gt;There is an ongoing effort to develop a SQLAlchemy data layer for Eve. This is
interesting because it will allow the use of a wide range of SQL databases
(PostgreSQL, MySQL, Oracle, etc.) as storage backends for Eve-powered REST
APIs.&lt;/p&gt;
&lt;p&gt;The current early prototype resides in its own &lt;a class="reference external" href="https://github.com/nicolaiarocci/eve/tree/sqlalchemy"&gt;sqlalchemy branch&lt;/a&gt;. We are in
the early stages of development and contributors are invited to join the ranks.
There is a lot of room for improvement at all levels: features, tests,
documentation, you name it.&lt;/p&gt;
&lt;p&gt;If you want to lend a hand please come visit us on &lt;a class="reference external" href="irc://irc.freenode.net/evehq"&gt;IRC&lt;/a&gt; so we can better
coordinate efforts. &lt;strong&gt;Jezier&lt;/strong&gt; has been working on the SQL features while
&lt;strong&gt;beatpanic&lt;/strong&gt; has been playing around with the test suite. Get in touch with
them or with me (I’m &lt;strong&gt;iaro&lt;/strong&gt; on IRC). If IRC is not your cup of tea feel free to
open a &lt;a class="reference external" href="https://github.com/nicolaiarocci/eve/issues"&gt;ticket&lt;/a&gt;, &lt;a class="reference external" href="mailto:eve&amp;#64;nicolaiarocci.com"&gt;email me&lt;/a&gt; or submit a pull requests: just make sure it is
against the sqlalchemy branch.&lt;/p&gt;
</summary><category term="sqlalchemy"></category></entry></feed>